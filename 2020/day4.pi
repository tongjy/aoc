import util.

main => time(go).

go => day41,day42.

day41=>
    input_data(Data),
    V = [ D: D in Data , valid1(D) ],
    println(part_one=V.len).

day42=>
    input_data(Data),
    V = [ D: D in Data , valid2(D) ],
    println(part_two=V.len).


/*
[byr,iyr,eyr,hgt,hcl,ecl,pid]
valid passports - those that have all required fields. Treat cid as optional.
*/
valid1(D) =>
    DF = D.join,
    foreach(S in [byr,iyr,eyr,hgt,hcl,ecl,pid])
        once find(DF ,to_string(S),_F,_T)
    end.

/*
byr (Birth Year) - four digits; at least 1920 and at most 2002.
iyr (Issue Year) - four digits; at least 2010 and at most 2020.
eyr (Expiration Year) - four digits; at least 2020 and at most 2030.
hgt (Height) - a number followed by either cm or in:
If cm, the number must be at least 150 and at most 193.
If in, the number must be at least 59 and at most 76.
hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.
ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.
pid (Passport ID) - a nine-digit number, including leading zeroes.
cid (Country ID) - ignored, missing or not.
*/

valid2(D) =>
    DF = D.join.split,
    foreach(S in [byr,iyr,eyr,hgt,hcl,ecl,pid])
        find3(DF ,to_string(S), I),
        valid2(S, DF[I, 5..20])  % xxx:... 20 is a magic number
    end.

find3(DF ,S, I)=>
    between(1, DF.len, I),
    DF[I, 1..3] == S.

valid2(cid, DF)=>true.

valid2(byr, DF),
    DF.len == 4, digits(DF)
=>
    Year = to_int(DF),
    Year >= 1920, Year <= 2002.
    
valid2(iyr, DF),
    DF.len == 4, digits(DF)
=>
    Year = to_int(DF),
    Year >= 2010, Year <= 2020.
    
valid2(eyr, DF),
    DF.len == 4, digits(DF)
=>
    Year = to_int(DF),
    Year >= 2020, Year <= 2030.

valid2(hcl, DF) =>
    DF.len == 7,
    DF[1]=='#',
    between(2,7,I),
    digitoraf(DF[I]).

valid2(ecl, DF) =>
    membchk(DF.to_atom, [amb,blu,brn,gry,grn,hzl,oth]).

valid2(pid, DF) =>
    DF.len == 9,
    digits(DF).

valid2(hgt, DF) =>
    append(X, "cm", DF), digits(X), N=to_int(X), N>=150, N<=193;
    append(X, "in", DF), digits(X), N=to_int(X), N>=59, N<=76.

digits(S)=>
    between(1,S.len,I),
    digit(S[I]).

digitoraf(C) =>
    digit(C);
    ord(C) >= ord('a'), 
    ord(C) <= ord('f').

input_data(Data) =>
    Lines = read_file_lines("day4.txt"),
    Data = Lines.split([""]).
