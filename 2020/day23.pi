import util, cp, ordset.

main => time(maingo).

maingo => go, go2.

go=>
    S = "598162734",
%    S = "389125467",
    M=new_map(), %1..1,000,000
    IS = S.map(to_int), Cur=IS.first,
    foreach( {I,J} in zip([IS.last]++IS, IS))
        M.put(I,J) 
    end,
%    printm(M,5),
    I:=1,
    while(I <= 100)
        Cur:=round1(Cur, M, 1, 9),
        I:=I+1
    end,
    print("part_one:"), printm(M,1).

go2=>
    S = "598162734",
%    S = "389125467",
    M=new_map(),  %1..1,000,000
    IS = S.map(to_int), Cur=IS.first,
    foreach( {I,J} in zip([1000000]++IS, IS)) M.put(I,J) end,
    M.put(IS.last,10),
    I:=10, 
    while(I < 1000000)
        M.put(I,I+1), 
        I:=I+1
    end,
    I:=1,
    while(I < 10000000)
        Cur:=round1(Cur, M, 1, 1000000),
        I:=I+1
    end,
    printm(M,1),
    N1 = M.get(1),N2 = M.get(N1), N3 = N1*N2,
    println(part_two=N3),
    nl.

printm(M,Cur) =>
    print(Cur),Next=M.get(Cur), I=1,
    while(Next != Cur, I<13 )
        print(","),print(Next),flush(),
        I:=I+1,
        Next:=M.get(Next)
    end,
    nl.

round1(Cur, M,  Min, Max)=Next =>
    %pick3
    Pick=pick3(M, Cur),
    MMin=allmin(Min, Pick),
    MMax=allmax(Max, Pick),
    %Dest
    Dest:=dest(Cur, Pick, MMin, MMax),
    %next
    VDest:=get(M, Dest),
    %place
    M.put(Pick[3], VDest ),
    M.put(Dest, Pick[1]),
    %gonext
    Next=get(M, Cur).

allmin(Min, List) = M, membchk(Min, List)  => M = allmin(Min+1, List).
allmin(Min, _) = Min.
    
allmax(Max, List) = M, membchk(Max, List)  => M = allmax(Max-1, List).
allmax(Max, _) = Max.

    
pick3(M,  Cur) = [Pick1,Pick2,Pick3] =>
    Pick1 = M.get( Cur),
    Pick2 = M.get( Pick1),
    Pick3 = M.get( Pick2),
    M.put( Cur, M.get(Pick3) ).   
   

dest(Cur, _, Min, Max)= Dest, Cur-1 < Min =>
    Dest=Max.
dest(Cur, Pick, Min, Max)= Dest ,membchk(Cur-1, Pick) =>
    Dest = dest(Cur-1, Pick, Min, Max).
dest(Cur, _, _, _)= Cur-1.