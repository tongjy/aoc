import util.

main => time(go).

go => 
    day81(L, LastVal),
    println(last_value=LastVal),
    I=1,
    do
        Last = day82(L[I]), I:=I+1,
        if(Last[1] == -1) then println( value2=Last[2] ),I:=L.len end
    while( I < L.len ).
    
 
day81(L, Val) =>
    input_data(Data),
    path(1,0,Path,Val,Data),
    L=Path.remove_dups.


day82(C)=R =>
    input_data(Data),
    if Data[C,2]==2 then
        Data[C,2]:=0
    elseif Data[C,2]==0 then
        Data[C,2]:=2
    end,
    path(1,0, Sum, Ret, Data),
    R = [Sum.last, Ret].

%table (+,+,max,nt)     % nt means that argument is not tabled
path(Row,Val,Sum, Res,Data), Row>Data.length => Sum=[-1],Res=Val.

path(Row,Val,Sum,Res,Data), Data[Row,4]>0 => Res=Val, Sum=[Row].

%nop
path(Row,Val,Sum,Res,Data), Data[Row,4]==0, Data[Row,2]==0 =>
    Data[Row,4]:=1,
    path(Row+1,Val,Sum1,Res,Data),
    Data[Row,4]:=1,
    Sum=[Row|Sum1].

%acc
path(Row,Val,Sum,Res,Data), Data[Row,4]==0, Data[Row,2]==1 =>
    Data[Row,4]:=1,
    Val:=Val+Data[Row,3],
    path(Row+1,Val,Sum,Res,Data),
    Data[Row,4]:=1.

%jmp
path(Row,Val,Sum,Res,Data), Data[Row,4]==0, Data[Row,2]==2 =>
    Data[Row,4]:=1,
    path(Row+Data[Row,3],Val,Sum1,Res,Data),
    Data[Row,4]:=1,
    Sum = [Row|Sum1].

input_data(Data) =>
    Lines = read_file_lines("day8o.txt"),
    Data = map(instruction, Lines, 1.. Lines.len).

instruction(S, I)=[I, Operation, Argument, 0, 0] =>
    if "acc"==S[1..3] then
        Operation = 1
    elseif "jmp"==S[1..3] then
        Operation = 2
    elseif "nop"==S[1..3] then
        Operation = 0
    else
        Operation = -1
    end,
    Argument=S[4..S.len].to_int .
    
